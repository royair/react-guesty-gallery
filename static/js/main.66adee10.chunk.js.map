{"version":3,"sources":["store/gallery.js","store/index.js","components/Counter.jsx","components/Cards.jsx","components/Search.jsx","components/Sort.jsx","App.js","serviceWorker.js","index.js"],"names":["DEFAULT_SORT_TYPE","DEFAULT_SORT_VALUE","configure","enforceActions","Gallery","_this","this","Object","classCallCheck","search","urlParams","q","runInAction","photos","axios","get","concat","then","res","data","compareByTitle","sortValue","a","b","title","compareByDate","moment","import_datetime","isBefore","_photos","sortType","reaction","values","window","history","pushState","qs","stringify","str","arr","slice","sort","sortByTitle","sortByDate","length","decorate","observable","computed","setQ","action","count","Store","gallery","store","Counter","props","react_default","createElement","Typography","variant","gutterBottom","style","fontWeight","Component","defaultProps","inject","observer","Cards","formatDate","date","format","_this2","map","photo","Grid","key","id","item","Card","width","CardContent","component","CardMedia","height","image","images","downsized","url","useStyles","root","padding","display","alignItems","input","marginLeft","flex","iconButton","divider","margin","Search","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","setState","value","target","state","handleOnKeyPress","Paper","InputBase","placeholder","onChange","onKeyPress","IconButton","aria-label","onClick","Search_default","Sort","getSelectValue","_this$props$store$gal","valueParsed","JSON","parse","oldUrlParams","objectSpread","FormControl","InputLabel","ref","htmlFor","Select","OutlinedInput","labelWidth","name","MenuItem","App","initUrlParams","newUrlParams","location","className","container","spacing","xs","justify","components_Search","components_Sort","components_Counter","components_Cards","Boolean","hostname","match","ReactDOM","render","react_router_dom","index_module","react_router","path","exact","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.66adee10.chunk.js","sourcesContent":["import {\r\n  decorate,\r\n  observable,\r\n  computed,\r\n  action,\r\n  configure,\r\n  runInAction,\r\n  reaction,\r\n} from \"mobx\";\r\nimport axios from 'axios'\r\nimport moment from 'moment';\r\nimport qs from \"query-string\";\r\n\r\nconst DEFAULT_SORT_TYPE  = 'title';\r\nconst DEFAULT_SORT_VALUE = 'asc';\r\n\r\nconfigure({ enforceActions: 'observed' });\r\n\r\nclass Gallery {\r\n  constructor() {\r\n    this._photos   = [];\r\n    this.urlParams = {\r\n      sortType: DEFAULT_SORT_TYPE,\r\n      sortValue: DEFAULT_SORT_VALUE,\r\n      q: '',\r\n    };\r\n\r\n    // initiate search every time 'q' (query) has changed\r\n    reaction(\r\n      () => this.urlParams.q, this.search);\r\n\r\n    // update url params and website's history every time model has changed\r\n    reaction(\r\n      () => Object.values(this.urlParams),\r\n      () => {\r\n        window.history.pushState('', null, '#/?' + qs.stringify(this.urlParams));\r\n      });\r\n  };\r\n\r\n  setQ(str) {\r\n    this.urlParams.q = str;\r\n  }\r\n\r\n  search = () => {\r\n    if (!this.urlParams.q) {\r\n      runInAction(() => {\r\n        this.photos = [];\r\n      });\r\n    }\r\n\r\n    axios\r\n      .get(`https://api.giphy.com/v1/gifs/search?api_key=dCpV0z0dW988CrZDZ8DYJtLMrJJI0pSz&q=${this.urlParams.q}&limit=9`)\r\n      .then((res) => {\r\n        runInAction(() => {\r\n          this.photos = res.data.data;\r\n        });\r\n      });\r\n  };\r\n\r\n  set photos(arr) {\r\n    this._photos = arr;\r\n  }\r\n\r\n  get photos() {\r\n    switch (this.urlParams.sortType) {\r\n      case 'title':\r\n        return this.sortByTitle(this._photos);\r\n\r\n      case 'datetime':\r\n        return this.sortByDate(this._photos);\r\n\r\n      default:\r\n        return this._photos;\r\n    }\r\n  };\r\n\r\n  get count() {\r\n    return this._photos.length;\r\n  }\r\n\r\n  sortByTitle(arr) {\r\n    const { sortValue } = this.urlParams;\r\n\r\n    return arr.slice().sort(this.compareByTitle(sortValue));\r\n  };\r\n\r\n  compareByTitle = (sortValue) => {\r\n    return (a, b) => {\r\n      if (a.title < b.title) {\r\n        return sortValue === 'asc' ? -1 : 1;\r\n      }\r\n\r\n      if (a.title > b.title) {\r\n        return sortValue === 'asc' ? 1 : -1;\r\n      }\r\n\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  sortByDate(arr) {\r\n    const { sortValue } = this.urlParams;\r\n\r\n    return arr.slice().sort(this.compareByDate(sortValue));\r\n  };\r\n\r\n  compareByDate = (sortValue) => {\r\n    return (a, b) => {\r\n      if (moment(a.import_datetime).isBefore(b.import_datetime)) {\r\n        return sortValue === 'asc' ? -1 : 1;\r\n      }\r\n\r\n      if (moment(b.import_datetime).isBefore(a.import_datetime)) {\r\n        return sortValue === 'asc' ? 1 : -1;\r\n      }\r\n\r\n      return 0;\r\n    }\r\n  }\r\n}\r\n\r\ndecorate(Gallery, {\r\n  _photos: observable,\r\n  photos: computed,\r\n  urlParams: observable,\r\n  setQ: action,\r\n  count: computed\r\n});\r\n\r\nexport default Gallery;\r\n","import { observable, decorate } from 'mobx';\r\n\r\nimport Gallery from './gallery';\r\n\r\nclass Store {\r\n  gallery = new Gallery();\r\n}\r\n\r\ndecorate(Store, { gallery: observable});\r\n\r\nexport default new Store();\r\n","import React, { Component } from 'react';\n\nimport Typography from \"@material-ui/core/Typography\";\nimport { inject, observer } from \"mobx-react\";\n\nclass Counter extends Component {\n  render() {\n    const { count } = this.props.store.gallery;\n\n    return (\n      <Typography variant=\"h6\" gutterBottom>\n        displaying\n        <span style={{ fontWeight: 600 }}> {count} </span>\n        images\n      </Typography>\n    )\n  }\n}\n\nCounter.defaultProps = {};\n\nexport default inject('store')(observer(Counter));\n","import React, { Component } from 'react';\nimport { inject, observer } from \"mobx-react\";\nimport moment from \"moment\";\n\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Grid from \"@material-ui/core/Grid\";\n\nclass Cards extends Component {\n  formatDate = (date) => {\n    return moment(date).format('DD/MM/YYYY');\n  };\n\n  render() {\n    let { photos } = this.props.store.gallery;\n    let photosUi   = photos.map((photo) =>\n      <Grid key={photo.id} item>\n        <Card style={{ width: '300px' }}>\n          <CardContent>\n            <Typography component=\"p\">\n              {photo.title}\n            </Typography>\n          </CardContent>\n          <CardMedia\n            style={{ height: '300px' }}\n            image={photo.images.downsized.url}\n            title=\"Contemplative Reptile\"\n          />\n          <CardContent>\n            <Typography component=\"p\">\n              {this.formatDate(photo.import_datetime)}\n            </Typography>\n          </CardContent>\n        </Card>\n      </Grid>\n    );\n\n    return (\n      photosUi\n    )\n  }\n}\n\nCards.defaultProps = {};\n\nexport default inject('store')(observer(Cards));\n","import React, { Component } from 'react';\nimport { inject, observer } from \"mobx-react\";\n\nimport Paper from \"@material-ui/core/Paper\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport SearchIcon from '@material-ui/icons/Search'\n\nconst useStyles = {\n  root: {\n    padding: '2px 4px',\n    display: 'flex',\n    alignItems: 'center',\n    width: 400,\n  },\n  input: {\n    marginLeft: 8,\n    flex: 1,\n  },\n  iconButton: {\n    padding: 10,\n  },\n  divider: {\n    width: 1,\n    height: 28,\n    margin: 4,\n  },\n};\n\nclass Search extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { value: '' };\n  }\n\n  componentDidMount() {\n    this.setState(() => ({ value: this.props.store.gallery.urlParams.q }));\n  }\n\n  handleChange = (e) => {\n    this.setState({ value: e.target.value });\n  };\n\n  search = () => {\n    const { value } = this.state;\n\n    this.props.store.gallery.setQ(value);\n  };\n\n  handleOnKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      this.search();\n    }\n  };\n\n  render() {\n    return (\n      <Paper style={useStyles.root}>\n        <InputBase style={useStyles.input}\n                   placeholder=\"Search giphy\"\n                   value={this.state.value}\n                   onChange={this.handleChange}\n                   onKeyPress={this.handleOnKeyPress}\n        />\n        <IconButton style={useStyles.iconButton}\n                    aria-label=\"Search\"\n                    onClick={this.search}\n        >\n          <SearchIcon/>\n        </IconButton>\n      </Paper>\n    )\n  }\n}\n\nSearch.defaultProps = {};\n\nexport default inject('store')(observer(Search));\n","import React, { Component } from 'react';\n\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport { inject, observer } from \"mobx-react\";\nimport { runInAction } from \"mobx\";\n\nclass Sort extends Component {\n  getSelectValue = () => {\n    const { sortType, sortValue } = this.props.store.gallery.urlParams;\n\n    return `{\"sortType\": \"${sortType}\", \"sortValue\": \"${sortValue}\"}`;\n  };\n\n  handleChange = (e) => {\n    const value        = e.target.value;\n    const valueParsed  = JSON.parse(value);\n    const oldUrlParams = this.props.store.gallery.urlParams;\n\n    runInAction(() => {\n      this.props.store.gallery.urlParams = { ...oldUrlParams, ...valueParsed };\n    });\n  };\n\n  render() {\n    return (\n      <FormControl variant=\"outlined\"\n                   style={{ width: '100%' }}\n                   margin=\"normal\">\n        <InputLabel ref={this.sortType}\n                    htmlFor=\"outlined-sort-simple\"\n        >\n          sort\n        </InputLabel>\n\n        <Select\n          value={this.getSelectValue()}\n          onChange={this.handleChange}\n          input={<OutlinedInput labelWidth={30}\n                                name=\"sort\"\n                                id=\"outlined-sort-simple\"/>}\n        >\n          <MenuItem\n            value={'{\"sortType\": \"title\", \"sortValue\": \"asc\"}'}>\n            Sort by Title ASC\n          </MenuItem>\n          <MenuItem\n            value={'{\"sortType\": \"title\", \"sortValue\": \"desc\"}'}>\n            Sort by Title DESC\n          </MenuItem>\n          <MenuItem\n            value={'{\"sortType\": \"datetime\", \"sortValue\": \"asc\"}'}>\n            Sort by Imported date ASC\n          </MenuItem>\n          <MenuItem\n            value={'{\"sortType\": \"datetime\", \"sortValue\": \"desc\"}'}>\n            Sort by Imported date DESC\n          </MenuItem>\n        </Select>\n      </FormControl>\n    )\n  }\n}\n\nSort.defaultProps = {};\n\nexport default inject('store')(observer(Sort));\n","import React, { Component } from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { runInAction } from \"mobx\";\r\nimport qs from 'query-string';\r\n\r\nimport { Counter, Sort, Search, Cards } from './components/index';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport './App.scss';\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.initUrlParams();\r\n  }\r\n\r\n  initUrlParams() {\r\n    const oldUrlParams = this.props.store.gallery.urlParams;\r\n    const newUrlParams = qs.parse(this.props.location.search);\r\n\r\n    runInAction(() => {\r\n      this.props.store.gallery.urlParams = { ...oldUrlParams, ...newUrlParams };\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12}>\r\n            <Grid container justify=\"center\" spacing={3} alignItems=\"center\">\r\n              <Search/>\r\n              <Grid item xs={2}>\r\n                <Sort/>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container justify=\"center\" spacing={3}>\r\n          <Grid item>\r\n            <Counter/>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container justify=\"center\" spacing={3}>\r\n          <Cards/>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default inject('store')(observer(App));\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'mobx-react';\nimport { HashRouter as Router, Route } from \"react-router-dom\";\n\nimport Store from './store';\nimport './index.scss';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router>\n    <Provider store={Store}>\n      <Route path=\"/\" exact component={App}/>\n    </Provider>\n  </Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}