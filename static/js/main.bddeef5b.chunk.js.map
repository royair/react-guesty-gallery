{"version":3,"sources":["store/gallery.js","store/index.js","App.js","serviceWorker.js","index.js"],"names":["DEFAULT_SORT_TYPE","DEFAULT_SORT_VALUE","DEFAULT_SORT_STRING","configure","enforceActions","Gallery","_this","this","Object","classCallCheck","compareByTitle","a","b","slug","searchParams","sortValue","compareByDate","moment","import_datetime","isBefore","_photos","sortType","q","_sortString","str","_this2","axios","get","concat","then","res","runInAction","photos","data","arr","slice","sort","sortByTitle","sortByDate","decorate","observable","sortString","computed","search","action","setq","Store","gallery","store","App","props","possibleConstructorReturn","getPrototypeOf","call","formatDate","date","format","e","value","target","handleChange","state","initSearchParams","oldSearchParams","newSearchParams","qs","parse","location","objectSpread","photosUi","page","map","photo","react_default","createElement","Grid","key","id","item","Card","style","width","CardContent","Typography","component","CardMedia","height","image","images","original","url","title","className","container","justify","spacing","xs","sm","md","lg","xl","TextField","label","type","margin","variant","onChange","FormControl","InputLabel","ref","htmlFor","Select","input","OutlinedInput","labelWidth","name","MenuItem","gutterBottom","fontWeight","length","Component","inject","observer","Boolean","window","hostname","match","ReactDOM","render","react_router_dom","index_module","react_router","path","exact","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bddeef5b.chunk.js","sourcesContent":["import { shuffle } from 'lodash';\r\nimport {\r\n  decorate,\r\n  observable,\r\n  computed,\r\n  action,\r\n  toJS,\r\n  configure,\r\n  runInAction\r\n} from \"mobx\";\r\nimport axios from 'axios'\r\nimport { sortBy, cloneDeep } from 'lodash';\r\nimport moment from 'moment';\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport qs from 'query-string';\r\nimport React from \"react\";\r\n\r\nconst DEFAULT_SORT_TYPE   = 'TITLE';\r\nconst DEFAULT_SORT_VALUE  = 'ASC';\r\nconst DEFAULT_SORT_STRING = 'Sort by Title, ASC';\r\n\r\nconfigure({ enforceActions: 'observed' });\r\n\r\nclass Gallery {\r\n  constructor() {\r\n    this._photos      = [];\r\n    this.searchParams = {\r\n      sortType: DEFAULT_SORT_TYPE,\r\n      sortValue: DEFAULT_SORT_VALUE,\r\n      q: ''\r\n    };\r\n    this.q            = '';\r\n    this._sortString  = DEFAULT_SORT_STRING;\r\n  }\r\n\r\n  setq(str) {\r\n    this.q = str;\r\n  }\r\n\r\n  search(str) {\r\n    axios\r\n      .get(`https://api.giphy.com/v1/gifs/search?api_key=dCpV0z0dW988CrZDZ8DYJtLMrJJI0pSz&q=${str}&limit=9`)\r\n      .then((res) => {\r\n        runInAction(() => {this.photos = res.data.data});\r\n      });\r\n  }\r\n\r\n  get sortString() {\r\n    return this._sortString;\r\n  };\r\n\r\n  set sortString(str) {\r\n    switch (str) {\r\n      case 'Sort by Title, ASC':\r\n        this.searchParams.sortValue = 'ASC';\r\n        this.searchParams.sortType  = 'TITLE';\r\n        break;\r\n\r\n      case 'Sort by Title DESC':\r\n        this.searchParams.sortValue = 'DESC';\r\n        this.searchParams.sortType  = 'TITLE';\r\n        break;\r\n\r\n      case 'Sort by Imported date ASC':\r\n        this.searchParams.sortValue = 'ASC';\r\n        this.searchParams.sortType  = 'DATETIME';\r\n        break;\r\n\r\n      case 'Sort by Imported date DESC':\r\n        this.searchParams.sortValue = 'DESC';\r\n        this.searchParams.sortType  = 'DATETIME';\r\n        break;\r\n    }\r\n\r\n    this._sortString = str;\r\n  };\r\n\r\n  set photos(arr) {\r\n    this._photos = arr;\r\n  }\r\n\r\n  get photos() {\r\n\r\n    switch (this.searchParams.sortType) {\r\n      case 'TITLE':\r\n        return this.sortByTitle(this._photos);\r\n        break;\r\n\r\n      case 'DATETIME':\r\n        return this.sortByDate(this._photos);\r\n        break;\r\n\r\n      default:\r\n        return this._photos;\r\n    }\r\n\r\n  };\r\n\r\n  sortByTitle(arr) {\r\n    return arr.slice().sort(this.compareByTitle);\r\n  };\r\n\r\n  sortByDate(arr) {\r\n    return arr.slice().sort(this.compareByDate);\r\n  };\r\n\r\n  compareByTitle = (a, b) => {\r\n\r\n    if (a.slug < b.slug) {\r\n      return this.searchParams.sortValue === 'ASC' ? -1 : 1;\r\n    }\r\n\r\n    if (a.slug > b.slug) {\r\n      return this.searchParams.sortValue === 'ASC' ? 1 : -1;\r\n    }\r\n\r\n    return 0;\r\n  };\r\n\r\n  compareByDate = (a, b) => {\r\n    if (moment(a.import_datetime).isBefore(b.import_datetime)) {\r\n      return this.searchParams.sortValue === 'ASC' ? -1 : 1;\r\n    }\r\n\r\n    if (moment(b.import_datetime).isBefore(a.import_datetime)) {\r\n      return this.searchParams.sortValue === 'ASC' ? 1 : -1;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n}\r\n\r\ndecorate(Gallery, {\r\n  _photos: observable,\r\n  _sortString: observable,\r\n  sortString: computed,\r\n  photos: computed,\r\n  searchParams: observable,\r\n  q: observable,\r\n  search: action,\r\n  setq: action\r\n});\r\n\r\nexport default Gallery;\r\n","import { observable, decorate } from 'mobx';\r\n\r\nimport Gallery from './gallery';\r\n\r\nclass Store {\r\n  gallery = new Gallery();\r\n}\r\n\r\ndecorate(Store, { gallery: observable});\r\n\r\nexport default new Store();\r\n","import React, { Component } from 'react';\nimport { inject, observer } from 'mobx-react';\n\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Card from '@material-ui/core/Card';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport OutlinedInput from '@material-ui/core/OutlinedInput'\nimport qs from 'query-string';\nimport moment from 'moment';\n\nimport './App.scss';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { sortType: 'fdfsdf' };\n\n    this.initSearchParams();\n  }\n\n  initSearchParams() {\n    const oldSearchParams = this.props.store.gallery.searchParams;\n    const newSearchParams = qs.parse(this.props.location.search);\n\n    this.props.store.gallery.searchParams = { ...oldSearchParams, ...newSearchParams };\n  }\n\n  formatDate = (date) => {\n    return moment(date).format('DD/MM/YYYY');\n  };\n\n  search = (e) => {\n    const { value } = e.target;\n\n    //this.props.store.gallery.setq(value);\n    this.props.store.gallery.search(value);\n  };\n\n  handleChange = (e) => {\n    this.props.store.gallery.sortString = e.target.value;\n  };\n\n  render() {\n    let { photos }  = this.props.store.gallery;\n    let numOfPhotos = this.state.page * 9;\n\n    let photosUi = photos.map((photo) =>\n      <Grid key={photo.id} item>\n        <Card style={{ width: '300px' }}>\n          <CardContent>\n            <Typography component=\"p\">\n              {photo.slug}\n            </Typography>\n          </CardContent>\n          <CardMedia\n            style={{ height: '300px' }}\n            image={photo.images.original.url}\n            title=\"Contemplative Reptile\"\n          />\n          <CardContent>\n            <Typography component=\"p\">\n              {this.formatDate(photo.import_datetime)}\n            </Typography>\n          </CardContent>\n        </Card>\n      </Grid>\n    );\n\n    return (\n      <div className=\"App\">\n        <Grid container justify=\"center\" spacing={3}>\n          <Grid item xs={12} sm={10} md={8} lg={5} xl={3}>\n            <TextField\n              style={{ width: '100%' }}\n              id=\"outlined-search\"\n              label=\"Search photos\"\n              type=\"search\"\n              className=\"\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              onChange={(e) => this.search(e)}\n            />\n          </Grid>\n        </Grid>\n\n        <Grid container justify=\"center\" spacing={3}>\n          <Grid item xs={12} sm={10} md={8} lg={5} xl={3}>\n\n            <FormControl variant=\"outlined\">\n\n              <InputLabel ref={this.sortType} htmlFor=\"outlined-age-simple\">\n                sort\n              </InputLabel>\n\n              <Select\n                value={this.props.store.gallery.sortString}\n                onChange={this.handleChange}\n                input={<OutlinedInput labelWidth={1} name=\"age\"\n                                      id=\"outlined-age-simple\"/>}\n              >\n                <MenuItem value={'Sort by Title, ASC'}>Sort by Title,\n                  ASC</MenuItem>\n                <MenuItem value={'Sort by Title DESC'}>Sort by Title\n                  DESC</MenuItem>\n                <MenuItem value={'Sort by Imported date ASC'}>Sort by Imported\n                  date ASC</MenuItem>\n                <MenuItem value={'Sort by Imported date DESC'}>Sort by Imported\n                  date DESC</MenuItem>\n              </Select>\n            </FormControl>\n\n          </Grid>\n        </Grid>\n\n        <Grid container justify=\"center\" spacing={3}>\n          <Grid item>\n            <Typography variant=\"h6\" gutterBottom>\n              displaying <span\n              style={{ fontWeight: 600 }}>{photosUi.length}</span> images\n            </Typography>\n          </Grid>\n        </Grid>\n\n        <Grid container justify=\"center\" spacing={3}>\n          {photosUi}\n        </Grid>\n\n        <Grid container justify=\"center\" spacing={3}>\n          <Grid item>\n\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default inject('store')(observer(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'mobx-react';\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\n\nimport Store from './store';\nimport './index.scss';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router>\n    <Provider store={Store}>\n      <Route path=\"/\" exact component={App}/>\n    </Provider>\n  </Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}